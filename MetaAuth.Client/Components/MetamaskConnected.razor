@using MetaAuth.Core.Services
@using MetaAuth.Core.Entities

@inject ITokenService TokenService
@inject ISnackbar Snackbar

<MudText Typo="Typo.h4" Align="Align.Center">Your Metamask account is connected!</MudText>
<MudCard Elevation="12" Class="glass-panel mt-7">
    <MudCardContent>
        <MudGrid Justify="Justify.Center" Spacing="5">
            <MudItem>
                <MudStack Row="true">
                    <MudImage Src="images/metamask-fox.svg" Width="70" Height="70"></MudImage>
                    <MudStack Justify="Justify.Center">
                        <MudText Typo="Typo.h5" Align="Align.Center">@SelectedAccount</MudText>
                    </MudStack>
                </MudStack>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

@if (!_userHaveToken)
{
    if (!_register)
    {
        <MudCard Elevation="12" Class="glass-panel mt-16">
            <MudCardContent>
                <MudText Typo="Typo.h6" Align="Align.Center">You don't have MetaAuth token. Would you like to create one?</MudText>
                <MudGrid Justify="Justify.Center" Class="mt-7 mb-7">
                    <MudButton Class="glass-button" Variant="Variant.Filled" Size="Size.Large" OnClick="EnableRegister">Create MetaAuth Token</MudButton>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    }
    else
    {
        <Register SelectedAccount="@SelectedAccount" OnUserRegistered="UserRegistered" />
    }
}
else
{
    @if (_tokenGathered)
    {
        <UserToken TokenData="@_tokenData"></UserToken>    
    }
    else
    {
        <MudCard Elevation="12" Class="glass-panel mt-16">
            <MudCardContent>
                <MudText Typo="Typo.h6" Align="Align.Center">Provide your token id to get your data</MudText>
                <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Class="mt-7 mb-7">
                    <MudTextField @bind-Value="_tokenId"
                                  For="@(() => _tokenId)"
                                  Immediate="true"
                                  Label="Token ID"
                                  InputType="InputType.Text"
                                  Style="width: 100px" Class="mb-2"/>
                    <MudButton Class="glass-button" Variant="Variant.Filled" Size="Size.Large"
                               OnClick="GetUserTokenData">Get Data</MudButton>
                </MudStack>
            </MudCardContent>
        </MudCard>
    }
}

@code {
    [Parameter]
    public string SelectedAccount { get; set; } = null!;

    [Parameter]
    public EventCallback<bool> OnTokenGathered { get; set; }
    [Parameter]
    public EventCallback<MetaAuthTokenData> OnTokenDataGathered { get; set; }

    private MetaAuthTokenData? _tokenData;
    private int _tokenId;

    bool _userHaveToken;
    bool _tokenGathered;
    bool _register;

    protected override async Task OnInitializedAsync()
    {
        _userHaveToken = await TokenService.CheckIfUserHaveTokenAsync(SelectedAccount);
    }

    private void EnableRegister()
    {
        _register = true;
    }

    private void UserRegistered(MetaAuthTokenData tokenData)
    {
        _tokenData = tokenData;
        _tokenGathered = true;
        _userHaveToken = true;
    }

    private async Task GetUserTokenData()
    {
        _tokenData = await TokenService.GetUserToken(_tokenId, SelectedAccount);
        if (_tokenData is null)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add("You are not owner of this token. Try again", Severity.Error);
        }
        else
        {
            _tokenGathered = true;
            await OnTokenGathered.InvokeAsync(_tokenGathered);
            await OnTokenDataGathered.InvokeAsync(_tokenData);
            StateHasChanged();
        }
    }
}

<style>
    .glass-panel {
      color: #fff;
      margin: 40px auto;
      background-color: rgba(255,255,255,0.06);
      width: 700px;
      border-radius: 15px;
      backdrop-filter: blur(10px);
      align-content: center;
      align-items: center;
    }
   
</style>