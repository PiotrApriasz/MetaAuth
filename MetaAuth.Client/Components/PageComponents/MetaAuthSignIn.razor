@using MetaAuth.Client.Services
@using MetaAuth.Core.Entities
@using MetaAuth.Core.Services
@using MetaAuth.Client.Entities
@using MetaAuth.SharedEntities.AzureCosmosDb
@using Nethereum.Contracts.Standards.ENS.ETHRegistrarController.ContractDefinition


@inject IAccountService AccountService
@inject ITokenService TokenService
@inject ISnackbar Snackbar
@inject IJSRuntime Js
@inject NavigationManager NavManager


@if (_userHaveToken)
{
    <MudText Typo="Typo.h5" Align="Align.Center">You have requested MetaAuth sign in from application @_signInModel.AppName</MudText>
    
    <MudCard Elevation="12" Class="glass-panel mt-16">
        <MudCardContent>
            <MudText Typo="Typo.h6" Align="Align.Center">Provide your token id to sign in</MudText>
            <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Class="mt-7 mb-7">
                <MudTextField @bind-Value="_tokenId"
                              For="@(() => _tokenId)"
                              Immediate="true"
                              Label="Token ID"
                              InputType="InputType.Text"
                              Style="width: 100px" Class="mb-2"/>
                <MudStack Row="true">
                    <MudButton Class="glass-button" Variant="Variant.Filled" Size="Size.Large"
                               OnClick="SignIn">Sign In</MudButton>
                    <MudButton Class="glass-button" Variant="Variant.Filled" Size="Size.Large"
                               OnClick="Cancel">Cancel</MudButton>
                </MudStack>
            </MudStack>
        </MudCardContent>
    </MudCard>
}


@code {
    [Parameter]
    public string SelectedAccount { get; set; } = null!;
    [Parameter]
    public string RequestId { get; set; } = null!;

    private SignInModel _signInModel = null!;
    
    private bool _tokenGathered;
    private MetaAuthTokenData? _tokenData;
    bool _userHaveToken;
    private int _tokenId;

    protected override async Task OnInitializedAsync()
    {
        _userHaveToken = await TokenService.CheckIfUserHaveTokenAsync(SelectedAccount);
        await GetSignInData();
    }

    private void TokenGathered(bool tokenGathered)
    {
        _tokenGathered = tokenGathered;
    }

    private async Task GetSignInData()
    {
        _signInModel = await AccountService.GetSignInData(RequestId);
    }

    private async Task SignIn()
    {
        await GetUserTokenData();

        var webAppName = _signInModel.AppName;

        var webApp = await GetWebAppData(webAppName);

        if (_tokenGathered)
        {
            var token = TokenService.ValidateToken(webAppName, _tokenData!, webApp);

            if (token is null)
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
                Snackbar.Add("This app is not registered in your token. You can't sign in", Severity.Warning);

                _signInModel.Finished = true;
                _signInModel.Success = false;
            }
            else
            {
                _signInModel.Finished = true;
                _signInModel.Success = true;
                _signInModel.AccessToken = token;
            }
            
            await AccountService.FinishSignIn(_signInModel);
            
            if (_signInModel.Success)
                NavManager.NavigateTo($"{_signInModel.SuccessReturnUrl}{_signInModel.Id}");
            else
            {
                await Task.Delay(5000);
                NavManager.NavigateTo(_signInModel.FailReturnUrl);
            }
        }
    }

    private async Task Cancel()
    {
        _signInModel.Finished = true;
        _signInModel.Success = false;
        await AccountService.FinishSignIn(_signInModel);
        NavManager.NavigateTo(_signInModel.FailReturnUrl);
    }

    private async Task GetUserTokenData()
    {
        _tokenData = await TokenService.GetUserToken(_tokenId, SelectedAccount);

        if (_tokenData is null)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add("You are not owner of this token. Try again", Severity.Error);
        }
        else
        {
            _tokenGathered = true;
            StateHasChanged();
        }
    }

    private async Task<RegisteredWebAppsModel> GetWebAppData(string webAppName)
    {
        var result = await AccountService.GetWebAppData(webAppName);

        return result;
    }
}

<style>
    .glass-panel {
      color: #fff;
      margin: 40px auto;
      background-color: rgba(255,255,255,0.06);
      width: 800px;
      border-radius: 15px;
      backdrop-filter: blur(10px);
      align-content: center;
      align-items: center;
    }
   
</style>